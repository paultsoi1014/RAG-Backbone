import asyncio
from typing import Optional, List, Union

from langchain_core.runnables import RunnableSequence
from langchain_anthropic import ChatAnthropic
from langchain_openai import ChatOpenAI

from langfuse.callback import CallbackHandler

from utils.process.query.prompt_template import (
    QueryExpandTemplate,
    StepBackPromptingTemplate,
)


class QueryRewrite:
    __slots__ = [
        "lc_client",
        "lf_handler",
        "query_rewrite_chain",
        "step_back_rewrite_chain",
    ]

    def __init__(
        self, lc_client: Union[ChatAnthropic, ChatOpenAI], lf_handler: CallbackHandler
    ):
        """
        A class to rewrite the query from users through query expansion and
        step-back query generation

        Attributes
        ----------
        lc_client: ChatOpenAI
            The langchain language model client used for generating queries
        lf_handler: langfuse.callback.CallbackHandler
            Handler for logging and tracing LLM interactions via Langfuse
        query_rewrite_chain: RunnableSequence
            A processing chain that takes an input query and expands it into
            multiple variations using the `QueryRewriteTemplate`
        step_back_rewrite_chain: RunnableSequence
            A processing chain that takes an input query and generates a "step-back"
            version using the `StepBackPromptingTemplate`
        """
        self.lc_client = lc_client
        self.lf_handler = lf_handler

        # Define runnable chain for query rewrite and step back rewrite
        self.query_rewrite_chain: RunnableSequence = (
            QueryExpandTemplate().formulate() | self.lc_client
        ).with_config({"run_name": "QueryExpandRewrite"})
        self.step_back_rewrite_chain: RunnableSequence = (
            StepBackPromptingTemplate().formulate() | self.lc_client
        ).with_config({"run_name": "StepBackRewrite"})

    async def _query_expansion(self, query: str, num_queries: int) -> List[str]:
        """
        Expands the input query by generating multiple variations using the
        `query_rewrite_chain`

        Parameters
        ----------
        query: str
            The original query from user to be expanded
        num_queries: int
            The number of query variations to generate

        Returns
        -------
        List[str]
            A list of query variations generated by the language model
        """
        response = await self.query_rewrite_chain.ainvoke(
            {"query": query, "num_queries": num_queries},
            config={"callbacks": [self.lf_handler]},
        )

        # Split the generated queries by line
        queries = response.content.split("\n\n")

        return queries

    async def _step_back_query_gen(self, query: str) -> str:
        """
        Generates a "step-back" version of the input query using the
        `step_back_rewrite_chain`

        Parameters
        ----------
        query: str
            The original query to generate a step-back version for

        Returns
        -------
        str
            The "step-back" transformed version of the input query
        """
        response = await self.step_back_rewrite_chain.ainvoke(
            {"question": query}, config={"callbacks": [self.lf_handler]}
        )

        return response.content

    async def _arewrite(self, query: str, num_queries: Optional[int] = 3) -> List[str]:
        """
        Runs both the query expansion and step-back query generation concurrently
        using asynchronous tasks and combines their results

        Parameters
        ----------
        query: str
            The original query to be rewritten
        num_queries: Optional[int]
            The number of query variations to generate for the query expansion
            (default is 3)

        Returns
        -------
        List[str]
            A combined list of expanded queries and the step-back query
        """
        # Run both asynchronous tasks concurrently
        expanded_queries, step_back_query = await asyncio.gather(
            self._query_expansion(query=query, num_queries=num_queries),
            self._step_back_query_gen(query),
        )

        # Queries combination
        queries = expanded_queries + [step_back_query]

        return queries

    def rewrite(self, query: str, num_queries: Optional[int] = 3) -> List[str]:
        """
        The main entry point for rewriting a query. It runs both the query expansion
        and step-back query generation asynchronously and returns a combined list
        of queries

        Parameters
        ----------
        query: str
            The original query to be rewritten
        num_queries: Optional[int]
            The number of query variations to generate for the query expansion
            (default is 3)

        Returns
        -------
        List[str]
            A combined list of expanded queries and the step-back query
        """
        queries = asyncio.run(self._arewrite(query, num_queries))

        return queries

    async def arewrite(self, query: str, num_queries: Optional[int] = 3) -> List[str]:
        """
        Asynchronously rewrites the input query by combining query expansion and
        step-back query generation results

        Parameters
        ----------
        query: str
            The original query to be rewritten
        num_queries: Optional[int]
            The number of query variations to generate for the query expansion
            (default is 3)

        Returns
        -------
        List[str]
            A combined list of expanded queries and the step-back query
        """
        queries = await self._arewrite(query, num_queries)

        return queries
