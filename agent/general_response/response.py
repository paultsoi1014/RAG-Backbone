import sys
import uuid

sys.path.append(".")

from typing import Optional, List, Union
from langfuse.callback import CallbackHandler

from agent.retriever import RAGAgentRetriever
from config import LANGFUSE_HOST, LANGFUSE_PUBLIC_KEY, LANGFUSE_SECRET_KEY

from utils.qa.general import ResponseGenerator


class RAGAgentResponse(RAGAgentRetriever):
    def __init__(self):
        """
        A class responsible for generating responses to user queries based on
        retrieval-augmented generation (RAG)
        """
        # Init langfuse handler for llm tracing & management
        self.langfuse_handler = CallbackHandler(
            public_key=LANGFUSE_PUBLIC_KEY,
            secret_key=LANGFUSE_SECRET_KEY,
            host=LANGFUSE_HOST,
            session_id=str(uuid.uuid4()),
        )

        RAGAgentRetriever.__init__(self, lf_handler=self.langfuse_handler)

    def generate_response(
        self,
        query: str,
        collections: Union[List[str]],
        query_rewrite: Optional[bool] = False,
        chat_mode: Optional[bool] = True,
    ) -> str:
        """
        Generates a natural language response to the provided query based on
        retrieval-augmented generation (RAG)

        Parameters
        ----------
        query : str
            The query provided by the user to generate a response
        collections : List[str]
            The document collections to retrieve relevant information from
        query_rewrite : Optional[bool]
            A flag indicating whether to rewrite the query before retrieval.
            Default is `False`
        chat_mode : Optional[bool]
            A flag indicating whether the agent is in chat mode. Default is
            `True`

        Returns
        -------
        str
            The natural language response generated by the agent
        """
        # Retrieve relevant documents
        retrieved_documents = self.retrieve_info(
            query, collections=collections, query_rewrite=query_rewrite
        )

        # Generate answer based on user query
        qa_generator = ResponseGenerator(
            lc_client=self.langchain_client,
            lf_handler=self.langfuse_handler,
            chat_mode=chat_mode,
        )
        response = qa_generator.generate(
            query=query, retrieved_info=retrieved_documents
        )

        return response
